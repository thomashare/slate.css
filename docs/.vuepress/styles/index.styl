// variables
@css {
	:root {
		--pad: 0.25rem;
		--bevel: 3px;
	}
}

// breakpoints
breakpoints = (sm md lg xl xxl)
sm-size = 576px
md-size = 768px
lg-size = 992px
xl-size = 1200px
xxl-size = 1400px

html
	font-family: sans-serif
	font-size: 0.9rem

body
	margin: 0

// render tool
.render
	*
		box-shadow: 0 0 1px rgba(0,0,0,0.5)

	& > *
		min-height: 50px

		&.sm
			min-height: 100px
		&.md
			min-height: 250px
		&.lg
			min-height: 500px
		&.xl
			min-height: 750px

	.flex
		content: ''
			
// debugging utilities
.debug
	box-shadow: inset 0 0 0 1px red !important
	&-green
		box-shadow: inset 0 0 0 1px green !important
	&-blue
		box-shadow: inset 0 0 0 1px blue !important

// add a default constraint for max width in each screen size
.constrain
	margin: 0 auto
	max-width: 100%

	for size in breakpoints
		@media screen and (min-width: size+'-size')
			max-width: size+'-size'
	
// grid display
.grid
	display: grid
	grid-template-columns: repeat(16, 1fr)

	& > *
		grid-column: 1/-1

	*
		max-width: 100%

	for i in (2..15)
		&{i}
			display: grid
			grid-template-columns: repeat(i, 1fr)

			& > *
				max-width: 100%

	// grid item alignment
	&.center
		align-items: center

	&.bottom
		align-items: end

// grid gaps
.gap
	gap: var(--pad)

	for i in (2..5)
		&{i}
			gap: 'calc(var(--pad) * %s)' % i

// column gap
.cgap
	column-gap: var(--pad)

	for i in (2..10)
		&{i}
			column-gap: 'calc(var(--pad) * %s)' % i

// row gap
.rgap
	row-gap: var(--pad)

	for i in (2..10)
		&{i}
			row-gap: 'calc(var(--pad) * %s)' % i

// flex display	
.flex
	&, &-children > *
		display: flex

	&.wrap, &.wrap-children > *
		flex-wrap: wrap

	// flex justification
	&.around
		justify-content: space-around
	&.between
		justify-content: space-between
	&.center
		justify-content: center
	&.right
		justify-content: flex-end
	
	// flex item alignment
	&.items-center
		align-items: center

	&.items-end
		align-items: flex-end

	// flex self alignment
	.self-start
		align-self: flex-start

	.self-center
		align-self: center
	
	.self-end
		align-self: flex-end

	.self-baseline
		align-self: baseline

	// justification
	&.just-center
		justify-content: center

	&.just-end
		justify-content: flex-end

	// grid direction: column
	&.column
		flex-flow: column

		.bottom
			margin-top: auto

	// flex breaks
	& > .break
		border: solid red 1px
		flex-basis: 100%
		
// spans
for start in (1..15)
	.s{start}
		grid-column: span start
		&-
			grid-column: start/-1
		
			for end in (start+1..15)
				&{end}
					grid-column: start/end+1

// screen size breaks
for size, i in breakpoints
	if breakpoints[i+1] != null
		@media screen and (max-width: breakpoints[i]+'-size' - 1)
			.{size}-break
				flex-basis: 100%
				grid-auto-flow: row
				grid-template-columns: 1fr

				& > *
					grid-column: 1/-1

	else
		@media screen and (max-width: 100%)
			.{size}-break
				grid-auto-flow: row
				grid-template-columns: 1fr

				& > *
					grid-column: 1/-1

// screen size fills
for size, i in breakpoints
	if breakpoints[i+1] != null
		@media screen and (max-width: breakpoints[i]+'-size' - 1)
			.{size}-fill
				grid-column: 1/-1

				& > *
					grid-column: 1/-1

// minimum height
for i in (1..10)
	.mh{i}
		min-height: i * 25px

// floating elements
.left
	float: left
	margin-bottom: var(--pad)
	margin-right: var(--pad)
.right
	float: right
	margin-bottom: var(--pad)
	margin-left: var(--pad)

// display classes
.block
	display: block
	&-children > *
		display: block

.iblock
	display: inline-block
	&-children > *
			display: inline-block

.inline
	display: inline
	&-children > *
			display: inline
	
// utilities
// margin
.m
	margin: var(--pad)

	&-children > *
		margin: var(--pad)

	&0, &0-children > *
		margin: 0

for i in (2..10)
	.m{i}
		margin: 'calc(var(--pad) * %s)' % i

// X axis
.mx
	margin-left: var(--pad)
	margin-right: var(--pad)

	&-children > *
		margin-left: var(--pad)
		margin-right: var(--pad)

	&-auto
		margin-left: auto
		margin-right: auto

	for i in (2..10)
		&{i}, &{i}-children > *
			margin-left: 'calc(var(--pad) * %s)' % i	
			margin-right: 'calc(var(--pad) * %s)' % i

	&0
		margin-left: 0
		margin-right: 0

// Y axis
.my
	margin-bottom: var(--pad)
	margin-top: var(--pad)

	&-children > *
		margin-bottom: var(--pad)
		margin-top: var(--pad)

	&-auto
		margin-bottom: auto
		margin-top: auto

	for i in (2..10)
		&{i}
			margin-bottom: 'calc(var(--pad) * %s)' % i	
			margin-top: 'calc(var(--pad) * %s)' % i

			&-children > *
				margin-bottom: 'calc(var(--pad) * %s)' % i	
				margin-top: 'calc(var(--pad) * %s)' % i

	&0
		margin-bottom: 0
		margin-top: 0

// remove left margin of first element and right margin of the last.
.m0-ends > *
	&:first-child
		margin-left: 0
	&:last-child
		margin-right: 0

// remove top margin of first element and bottom margin of the last.
.m0-ends-v > *
	&:first-child
		margin-top: 0
	&:last-child
		margin-bottom: 0

.flex.column.m0-ends > *
	&:first-child
		margin-top: 0
	&:last-child
		margin-bottom: 0

// top
.mt
	margin-top: var(--pad)

	&-children > *
		margin-top: var(--pad)

	for i in (2..10)
		&{i}, &{i}-children > *
			margin-top: 'calc(var(--pad) * %s)' % i

	&0, &0-children > *
		margin-top: 0

	&-auto
		margin-top: auto

// right
.mr
	margin-right: var(--pad)

	&-children > *
		margin-right: var(--pad)

	&-auto
		margin-right: auto

	for i in (2..10)
		&{i}
			margin-right: 'calc(var(--pad) * %s)' % i

	&0, &0-children > *
		margin-right: 0

// bottom
.mb
	margin-bottom: var(--pad)

	&-children > *
		margin-bottom: var(--pad)

	for i in (2..10)
		&{i}
			margin-bottom: 'calc(var(--pad) * %s)' % i

	&0, &0-children > *
		margin-bottom: 0

	&-auto
		margin-bottom: auto

// left
.ml
	margin-left: var(--pad)

	&-children > *
		margin-left: var(--pad)

	&-auto
		margin-left: auto

	for i in (2..10)
		&{i}
			margin-left: 'calc(var(--pad) * %s)' % i

	&0, &0-children > *
		margin-left: 0

// padding
.p
	padding: var(--pad)

	&-children > *
		padding: var(--pad)

	for i in (2..10)
		&{i}, &{i}-children > *
			padding: 'calc(var(--pad) * %s)' % i

	&0
		padding: 0

.px
	padding-left: var(--pad)
	padding-right: var(--pad)

	&-children > *
		padding-left: var(--pad)
		padding-right: var(--pad)

	for i in (2..10)
		&{i}, &{i}-children > *
			padding-left: 'calc(var(--pad) * %s)' % i
			padding-right: 'calc(var(--pad) * %s)' % i

	&0
		padding-left: 0
		padding-right: 0
	
.py
	padding-bottom: var(--pad)
	padding-top: var(--pad)

	&-children > *
		padding-bottom: var(--pad)
		padding-top: var(--pad)

	for i in (2..10)
		&{i}, &{i}-children > *
			padding-bottom: 'calc(var(--pad) * %s)' % i
			padding-top: 'calc(var(--pad) * %s)' % i

	&0
		padding-bottom: 0
		padding-top: 0

// top
.pt
	padding-top: var(--pad)

	&-children > *
		padding-top: var(--pad)

	for i in (2..10)
		&{i}
			padding-top: 'calc(var(--pad) * %s)' % i

	&0
		padding-top: 0

// right
.pr
	padding-right: var(--pad)

	&-children > *
		padding-right: var(--pad)

	for i in (2..10)
		&{i}
			padding-right: 'calc(var(--pad) * %s)' % i

	&0
		padding-right: 0

// bottom
.pb
	padding-bottom: var(--pad)

	&-children > *
		padding-bottom: var(--pad)

	for i in (2..10)
		&{i}
			padding-bottom: 'calc(var(--pad) * %s)' % i

	&0
		padding-bottom: 0

// left
.pl
	padding-left: var(--pad)

	&-children > *
		padding-left: var(--pad)

	for i in (2..10)
		&{i}
			padding-left: 'calc(var(--pad) * %s)' % i

	&0
		padding-left: 0

// padding utilities
// remove left padding of first element and right padding of the last.
.p0-ends > *
	&:first-child
		padding-left: 0
	&:last-child
		padding-right: 0

.flex.column.p0-ends > *
	&:first-child
		padding-top: 0
	&:last-child
		padding-bottom: 0

.p0
	padding: 0
	
// buttons
button, input[type="submit"], .btn, .btn-children > *
	background: none
	border: solid #D0D0D0 1px
	border-radius: var(--bevel)
	font-size: 1rem
	justify-content: center
	padding: var(--pad)
			
// text
// font sizes
for i in (1..24)
	.fs{i}, .fs{i}-children > *
		font-size: i*0.25rem+0.25

// text colors
.text-blend
	color: inherit

	&-children > *
		color: inherit

	path
		fill: currentColor

	&-list li, &-list a
		color: inherit

// text alignment
.text-center, .text-center-children > *
	display: block
	text-align: center
	
.text-right, .text-right-children > *
	display: block
	text-align: right

// max width
for i in (1..10)
	.mw{i}
		max-width: 10ch * i

// link formatting
.hover-underline, .hover-underline-links > a, .hover-underline-children > *, .hover-underline-links-children > * > a
	text-decoration: none
	&:hover
		text-decoration: underline

.no-hover, .no-hover-children > a
	text-decoration: none

.uppercase
	text-transform: uppercase

// font weights
.fw-thin
	font-weight: 100
.fw-light
	font-weight: 300
.fw-normal
	font-weight: 400
.fw-bold
	font-weight: 600
.fw-black
	font-weight: 800

// line heights
for i in (2..10)
	.lh{i}
		line-height: i*0.15em+1

// UX features
.hide
	for size in breakpoints
		@media screen and (max-width: size+'-size')
			&-{size}
				display: none

// positioning
.fixed
	position: sticky
	top: 0

.full-height
	height: 100%

.full-viewport-height
	height: 100vh

.full-width
	width: 100%

.full-viewport-width
	height: 100vw

// media
.card, .card-children > *
	background-color: #FFF
	box-shadow: 0 0 25px rgba(0,0,0,0.025)

.cover
	height: 100%
	object-fit: cover
	width: 100%

.round, .round-children > *
	border-radius: 4em

.no-list
	list-style: none

.no-wrap
	white-space: nowrap